name: Build

on:
  workflow_dispatch:
  push:

env:
  IMAGE: flomesh/pipy-pjs
  PKG_NAME: pipy-pjs

defaults:
  run:
    shell: bash
    working-directory: pipy

jobs:
  set-release-version:
    name: set-release-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: pipy

      - name: Set RELEASE_VERSION
        id: version
        run: |
          pwd
          ls -l
          CI_COMMIT_DATE=$(date +%Y%m%d%H%M%S)
          echo "CI_COMMIT_DATE=${CI_COMMIT_DATE}" >> $GITHUB_ENV
          git fetch --tags
          RELEASE_VERSION=`git name-rev --tags --name-only $(git rev-parse HEAD)`
          if [ $RELEASE_VERSION = 'undefined' ]
          then
              echo "::set-output name=release_version::nightly-${CI_COMMIT_DATE}"
              echo "::set-output name=version::nightly"
              echo "::set-output name=commit_date::${CI_COMMIT_DATE}"
          else
              echo "::set-output name=release_version::${RELEASE_VERSION}"
              echo "::set-output name=commit_date::${CI_COMMIT_DATE}"
          fi

      - name: Show envs
        run: export
    outputs:
      release_version: ${{steps.version.outputs.release_version}}
      commit_date: ${{steps.version.outputs.commit_date}}

  x86-binary:
    needs: set-release-version
    name: x86-binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: pipy

      - name: Show envs
        run: export

      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Build
        id: build
        env:
          RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
        run: |
          set -x
          ./build.sh -sp -t ${RELEASE_VERSION}
          ls -l
          echo "::set-output name=artifact_name::$(ls *${RELEASE_VERSION}*.tar.gz)"
          echo "::set-output name=arch::$(uname -m)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          path: pipy/${{ steps.build.outputs.artifact_name }}
          name: ${{ steps.build.outputs.artifact_name }}

    outputs:
      artifact_name: ${{steps.build.outputs.artifact_name}}
      arch: ${{steps.build.outputs.arch}}

  x86-alpine-docker:
    needs: set-release-version
    name: x86-alpine-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: pipy

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Show envs
        run: export

      - name: Build image
        id: build
        env:
          DOCKER_BUILDKIT: 1
          RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
        run: |
          ./build.sh -ncp -t ${RELEASE_VERSION}
          ls -l
          echo "::set-output name=artifact_name::$(ls *${RELEASE_VERSION}*.tar.gz)"
          echo "::set-output name=arch::$(uname -m)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          path: pipy/${{ steps.build.outputs.artifact_name }}
          name: ${{ steps.build.outputs.artifact_name }}

    outputs:
      artifact_name: ${{steps.build.outputs.artifact_name}}
      arch: ${{steps.build.outputs.arch}}

  aarch64-binary:
    needs: set-release-version
    name: aarch64-binary
    runs-on: [self-hosted, arm64]
    steps:
      - uses: actions/checkout@v2
        with:
          path: pipy

      - name: Show envs
        run: export

      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Build
        id: build
        env:
          RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
        run: |
          ./build.sh -sp -t ${RELEASE_VERSION}
          ls -l
          echo "::set-output name=artifact_name::$(ls *${RELEASE_VERSION}*.tar.gz)"
          echo "::set-output name=arch::$(uname -m)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          path: pipy/${{ steps.build.outputs.artifact_name }}
          name: ${{ steps.build.outputs.artifact_name }}

    outputs:
      artifact_name: ${{steps.build.outputs.artifact_name}}
      arch: ${{steps.build.outputs.arch}}

  aarch64-alpine-docker:
    needs: set-release-version
    name: aarch64-alpine-docker
    runs-on: [self-hosted, arm64]
    steps:
      - uses: actions/checkout@v2
        with:
          path: pipy

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Show envs
        run: export

      - name: Build image
        id: build
        env:
          DOCKER_BUILDKIT: 1
          RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
        run: |
          ./build.sh -ncp -t ${RELEASE_VERSION}
          ls -l
          echo "::set-output name=artifact_name::$(ls *${RELEASE_VERSION}*.tar.gz)"
          echo "::set-output name=arch::$(uname -m)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          path: pipy/${{ steps.build.outputs.artifact_name }}
          name: ${{ steps.build.outputs.artifact_name }}

    outputs:
      artifact_name: ${{steps.build.outputs.artifact_name}}
      arch: ${{steps.build.outputs.arch}}

  x86-rpm:
    needs: set-release-version
    name: x86-rpm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: pipy

      - name: Show envs
        run: export

      - name: Build rpm
        id: build
        env:
          RELEASE_VERSION: ${{ needs.set-release-version.outputs.release_version }}
        run: |
          ./build.sh -nr -t ${RELEASE_VERSION}
          ls -l
          echo "::set-output name=artifact_name::$(cd rpm; ls *.rpm)"
          echo "::set-output name=arch::$(uname -m)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          path: pipy/rpm/${{ steps.build.outputs.artifact_name }}
          name: ${{ steps.build.outputs.artifact_name }}

    outputs:
      artifact_name: ${{steps.build.outputs.artifact_name}}
      arch: ${{steps.build.outputs.arch}}

  save-log:
    name: save log
    runs-on: ubuntu-latest
    needs:
      - x86-binary
      - aarch64-binary
      - x86-alpine-docker
      - aarch64-alpine-docker
      - x86-rpm
    steps:
      - name: Save log
        uses: peter-evans/repository-dispatch@v1
        with:
          token:  ${{ secrets.REPO_DISPATCH_PAT }}
          repository: ${{ secrets.REPO_FOR_LOG }}
          event-type: save-log
          client-payload: |
            {
                "github": ${{toJSON(github)}},
                "artifacts": [
                  { "type": "rpm", "arch": "${{needs.x86-rpm.outputs.arch}}", "name": "${{ needs.x86-rpm.outputs.artifact_name }}" },
                  { "type": "binary", "arch": "${{needs.x86-binary.outputs.arch}}", "name": "${{ needs.x86-binary.outputs.artifact_name }}" },
                  { "type": "binary", "arch": "${{needs.aarch64-binary.outputs.arch}}", "name": "${{ needs.aarch64-binary.outputs.artifact_name }}" },
                  { "type": "image", "arch": "${{needs.x86-alpine-docker.outputs.arch}}", "name": "${{ needs.x86-alpine-docker.outputs.artifact_name }}" },
                  { "type": "image", "arch": "${{needs.aarch64-alpine-docker.outputs.arch}}", "name": "${{ needs.aarch64-alpine-docker.outputs.artifact_name }}" }
                ]
             }
